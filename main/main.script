local id = 0

function init(self)
	msg.post("@render:", "use_fixed_projection", { zoom = 2 })
	msg.post("/timer", "create_timer", { timer_id = hash('spawn'), duration = 3, started = true })
	sound.play("#music", { gain = 1.0, pan = 0 })

	self.bads = {}
	self.score = 0
	self.strikes = 0
	self.game_over = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not neededjump
end

function update(self, dt)
	if not self.game_over then
		self.score = self.score + 1
		msg.post("/gui", "update_score", { score = self.score })
	end
end

function on_message(self, message_id, message, sender)
	print(message_id)
	if message_id == hash("timeout") then
		if message.timer_id == hash('spawn') then
			local props = {}
			props[hash(string.format("/bad", id))] = { direction = math.pow(-1, math.random(1, 2)) }
			id = id + 1
			collectionfactory.create("#bad_factory", nil, nil, props)
			msg.post("/timer", hash("set_duration"), { timer_id = hash('spawn'), duration = math.random() * 1.5 + 5/60 })
		end
	elseif message_id == hash("hit") then
		self.strikes = self.strikes + 1
		msg.post("/gui", "update_strikes", { strikes = self.strikes })
		if self.strikes > 3 and not self.game_over then
			msg.post("/gui", "game_over")
			go.delete("/player/root")
			self.game_over = true
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
